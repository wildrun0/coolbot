import random
import logging
from vkbottle.bot import Message
from vkbottle.dispatch.rules.base import ChatActionRule
from loader import bot
from states import SuperStates
from generator import WordsGenerator
from data.config import MINIMUM_WORDS


generator = WordsGenerator()    # –º–æ–∂–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å —Å –¥–æ–ø. –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ (—Å–º generator/words_generator.py)
phrase = '–∫—É–ª –≥–æ–≤–æ—Ä–∏'   # —Ñ—Ä–∞–∑–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –±–æ—Ç


@bot.on.chat_message(ChatActionRule("chat_invite_user"))
async def bot_invite(event: Message) -> None:
    action = event.action
    group_id = event.group_id
    if not action or not group_id:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –Ω–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –∏–ª–∏ –Ω–µ—Ç
        return
    await bot.state_dispenser.set(event.peer_id, SuperStates.NOT_ABLE_TALK)
    if action.member_id == -group_id:
        await event.answer(f"""
            üëã–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!
            –î–ª—è —Ä–∞–±–æ—Ç—ã –º–Ω–µ –Ω—É–∂–Ω–æ –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–µ—Ä–µ–ø–∏—Å–∫–µ üìß
            –ù–∞—á–Ω—É –≥–æ–≤–æ—Ä–∏—Ç—å –∫–æ–≥–¥–∞ –Ω–∞–≥–æ–≤–æ—Ä–∏—Ç–µ {MINIMUM_WORDS} —Å–ª–æ–≤
            ü™õ–î–ª—è —Å–±—Ä–æ—Å–∞ —Å–ª–æ–≤–∞—Ä–Ω–æ–≥–æ –∑–∞–ø–∞—Å–∞ –≤ –±–µ—Å–µ–¥–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É "–∫—É–ª —Å–±—Ä–æ—Å" 
            (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã, –±–æ—Ç—É –Ω–µ–æ–±—Ö. –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
        """)

  
@bot.on.chat_message(state=SuperStates.NOT_ABLE_TALK)
async def switch_to_able(event: Message) -> None:   # –µ—Å–ª–∏ –≤ –∫–∞–∫–æ–π-—Ç–æ –±–µ—Å–µ–¥–µ –Ω–∞–±—Ä–∞–ª–æ—Å—å –Ω—É–∂–Ω–æ–µ –∫–æ–ª-–≤–æ —Å–ª–æ–≤ –¥–ª—è —Å–ª–æ–≤–∞—Ä—è –±–æ—Ç–∞
    if len(generator.words_array[event.peer_id]) >= MINIMUM_WORDS:
        await bot.state_dispenser.set(event.peer_id, SuperStates.ABLE_TALK)
        logging.info(f"peer({event.peer_id}) state switched from NOT_ABLE_TALK to ABLE_TALK")


@bot.on.chat_message(text_lowered=phrase, state=SuperStates.ABLE_TALK)
async def cool_say(event: Message) -> None: # —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    generated_text = await generator.generate_message(event.peer_id)
    await event.answer(generated_text)
    logging.info(f"peer({event.peer_id}) used a cool_say func")


@bot.on.chat_message(text_lowered="–∫—É–ª —Å–±—Ä–æ—Å")
async def cool_reset(event: Message) -> None:
    # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫, —Å—Ç–µ–π—Ç, –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    generator.words_array[event.peer_id] = []
    await generator.write_file(event.peer_id, event.text)
    await bot.state_dispenser.set(event.peer_id, SuperStates.NOT_ABLE_TALK)
    await event.answer(f"""
        –°–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å —Å–±—Ä–æ—à–µ–Ω!üìïüö´
        üí¨–ß—Ç–æ–±—ã —è —Å–Ω–æ–≤–∞ –∑–∞–≥–æ–≤–æ—Ä–∏–ª, –Ω–∞–ø–æ–º–∏–Ω–∞—é, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–≥–æ–≤–æ—Ä–∏—Ç—å –Ω–∞ {MINIMUM_WORDS} —Å–æ–æ–±—â–µ–Ω–∏–π.
    """)
    logging.info(f"peer({event.peer_id}) used cool_reset")


@bot.on.chat_message()
async def cool_events(event: Message) -> None:
    if random.randint(0,9) == 9 and event.state_peer.state == "SuperStates:0":  # —Ä–∞–Ω–¥–æ–º–Ω—ã–µ –≤—Å—Ç–∞–≤–∫–∏ –±–æ—Ç–∞ –ø–æ—Å—Ä–µ–¥–∏ –¥–∏–∞–ª–æ–≥–∞ - —Ç—É—Ç
        generated_text = await generator.generate_message(event.peer_id)
        await event.answer(generated_text)
        logging.info(f"peer({event.peer_id}) used cool_rand_talk")
    if event.text.lower() != phrase:                                            # –ø–æ–ø—É—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Å–ª–æ–≤–∞/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–∑ –±–µ—Å–µ–¥—ã
        await generator.write_file(event.peer_id, event.text)
        logging.debug(f"peer({event.peer_id}) phrase written")